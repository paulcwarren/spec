// Code generated by counterfeiter. DO NOT EDIT.
package csi_fake

import (
	"sync"

	"github.com/paulcwarren/spec"
	"github.com/paulcwarren/spec/csishim"
	"google.golang.org/grpc"
)

type FakeCsi struct {
	NewNodeClientStub        func(cc *grpc.ClientConn) csi.NodeClient
	newNodeClientMutex       sync.RWMutex
	newNodeClientArgsForCall []struct {
		cc *grpc.ClientConn
	}
	newNodeClientReturns struct {
		result1 csi.NodeClient
	}
	newNodeClientReturnsOnCall map[int]struct {
		result1 csi.NodeClient
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCsi) NewNodeClient(cc *grpc.ClientConn) csi.NodeClient {
	fake.newNodeClientMutex.Lock()
	ret, specificReturn := fake.newNodeClientReturnsOnCall[len(fake.newNodeClientArgsForCall)]
	fake.newNodeClientArgsForCall = append(fake.newNodeClientArgsForCall, struct {
		cc *grpc.ClientConn
	}{cc})
	fake.recordInvocation("NewNodeClient", []interface{}{cc})
	fake.newNodeClientMutex.Unlock()
	if fake.NewNodeClientStub != nil {
		return fake.NewNodeClientStub(cc)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newNodeClientReturns.result1
}

func (fake *FakeCsi) NewNodeClientCallCount() int {
	fake.newNodeClientMutex.RLock()
	defer fake.newNodeClientMutex.RUnlock()
	return len(fake.newNodeClientArgsForCall)
}

func (fake *FakeCsi) NewNodeClientArgsForCall(i int) *grpc.ClientConn {
	fake.newNodeClientMutex.RLock()
	defer fake.newNodeClientMutex.RUnlock()
	return fake.newNodeClientArgsForCall[i].cc
}

func (fake *FakeCsi) NewNodeClientReturns(result1 csi.NodeClient) {
	fake.NewNodeClientStub = nil
	fake.newNodeClientReturns = struct {
		result1 csi.NodeClient
	}{result1}
}

func (fake *FakeCsi) NewNodeClientReturnsOnCall(i int, result1 csi.NodeClient) {
	fake.NewNodeClientStub = nil
	if fake.newNodeClientReturnsOnCall == nil {
		fake.newNodeClientReturnsOnCall = make(map[int]struct {
			result1 csi.NodeClient
		})
	}
	fake.newNodeClientReturnsOnCall[i] = struct {
		result1 csi.NodeClient
	}{result1}
}

func (fake *FakeCsi) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newNodeClientMutex.RLock()
	defer fake.newNodeClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCsi) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ csishim.Csi = new(FakeCsi)
