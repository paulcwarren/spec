// This file was generated by counterfeiter
package csi_fake

import (
	"sync"

	spec "github.com/paulcwarren/spec"
	"github.com/paulcwarren/spec/csishim"
	"google.golang.org/grpc"
)

type FakeCsi struct {
	NewNodeClientStub        func(cc *grpc.ClientConn) spec.NodeClient
	newNodeClientMutex       sync.RWMutex
	newNodeClientArgsForCall []struct {
		cc *grpc.ClientConn
	}
	newNodeClientReturns struct {
		result1 spec.NodeClient
	}
	NewControllerClientStub        func(cc *grpc.ClientConn) spec.ControllerClient
	newControllerClientMutex       sync.RWMutex
	newControllerClientArgsForCall []struct {
		cc *grpc.ClientConn
	}
	newControllerClientReturns struct {
		result1 spec.ControllerClient
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCsi) NewNodeClient(cc *grpc.ClientConn) spec.NodeClient {
	fake.newNodeClientMutex.Lock()
	fake.newNodeClientArgsForCall = append(fake.newNodeClientArgsForCall, struct {
		cc *grpc.ClientConn
	}{cc})
	fake.recordInvocation("NewNodeClient", []interface{}{cc})
	fake.newNodeClientMutex.Unlock()
	if fake.NewNodeClientStub != nil {
		return fake.NewNodeClientStub(cc)
	}
	return fake.newNodeClientReturns.result1
}

func (fake *FakeCsi) NewNodeClientCallCount() int {
	fake.newNodeClientMutex.RLock()
	defer fake.newNodeClientMutex.RUnlock()
	return len(fake.newNodeClientArgsForCall)
}

func (fake *FakeCsi) NewNodeClientArgsForCall(i int) *grpc.ClientConn {
	fake.newNodeClientMutex.RLock()
	defer fake.newNodeClientMutex.RUnlock()
	return fake.newNodeClientArgsForCall[i].cc
}

func (fake *FakeCsi) NewNodeClientReturns(result1 spec.NodeClient) {
	fake.NewNodeClientStub = nil
	fake.newNodeClientReturns = struct {
		result1 spec.NodeClient
	}{result1}
}

func (fake *FakeCsi) NewControllerClient(cc *grpc.ClientConn) spec.ControllerClient {
	fake.newControllerClientMutex.Lock()
	fake.newControllerClientArgsForCall = append(fake.newControllerClientArgsForCall, struct {
		cc *grpc.ClientConn
	}{cc})
	fake.recordInvocation("NewControllerClient", []interface{}{cc})
	fake.newControllerClientMutex.Unlock()
	if fake.NewControllerClientStub != nil {
		return fake.NewControllerClientStub(cc)
	}
	return fake.newControllerClientReturns.result1
}

func (fake *FakeCsi) NewControllerClientCallCount() int {
	fake.newControllerClientMutex.RLock()
	defer fake.newControllerClientMutex.RUnlock()
	return len(fake.newControllerClientArgsForCall)
}

func (fake *FakeCsi) NewControllerClientArgsForCall(i int) *grpc.ClientConn {
	fake.newControllerClientMutex.RLock()
	defer fake.newControllerClientMutex.RUnlock()
	return fake.newControllerClientArgsForCall[i].cc
}

func (fake *FakeCsi) NewControllerClientReturns(result1 spec.ControllerClient) {
	fake.NewControllerClientStub = nil
	fake.newControllerClientReturns = struct {
		result1 spec.ControllerClient
	}{result1}
}

func (fake *FakeCsi) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newNodeClientMutex.RLock()
	defer fake.newNodeClientMutex.RUnlock()
	fake.newControllerClientMutex.RLock()
	defer fake.newControllerClientMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCsi) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ csishim.Csi = new(FakeCsi)
